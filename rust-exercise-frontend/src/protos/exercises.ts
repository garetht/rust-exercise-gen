// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: src/protos/exercises.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "rust.exercises";

export interface Exercises {
  /** Rust explanation map?? but we'd need formatting */
  exerciseGroups: ErrorExerciseGroup[];
}

export interface ErrorExerciseGroup {
  errorCodes: string[];
  exercises: Exercise[];
}

export interface Exercise {
  formattedProgram: string;
  /**
   * Available variable names in the program. Used for creating
   * distractors
   */
  variableNames: string[];
  errors: ErrorMessage[];
  humanErrors: string[];
  /**
   * How many primitive units are in this program. Used for
   * starting with simpler programs
   */
  programLength: number;
}

export interface ErrorMessage {
  message: string;
  implicatedVariableNames: string[];
  code: ErrorMessageCode | undefined;
}

export interface ErrorMessageCode {
  code: string;
}

function createBaseExercises(): Exercises {
  return { exerciseGroups: [] };
}

export const Exercises: MessageFns<Exercises> = {
  encode(message: Exercises, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.exerciseGroups) {
      ErrorExerciseGroup.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Exercises {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExercises();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.exerciseGroups.push(ErrorExerciseGroup.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Exercises {
    return {
      exerciseGroups: globalThis.Array.isArray(object?.exerciseGroups)
        ? object.exerciseGroups.map((e: any) => ErrorExerciseGroup.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Exercises): unknown {
    const obj: any = {};
    if (message.exerciseGroups?.length) {
      obj.exerciseGroups = message.exerciseGroups.map((e) => ErrorExerciseGroup.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Exercises>, I>>(base?: I): Exercises {
    return Exercises.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Exercises>, I>>(object: I): Exercises {
    const message = createBaseExercises();
    message.exerciseGroups = object.exerciseGroups?.map((e) => ErrorExerciseGroup.fromPartial(e)) || [];
    return message;
  },
};

function createBaseErrorExerciseGroup(): ErrorExerciseGroup {
  return { errorCodes: [], exercises: [] };
}

export const ErrorExerciseGroup: MessageFns<ErrorExerciseGroup> = {
  encode(message: ErrorExerciseGroup, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.errorCodes) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.exercises) {
      Exercise.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ErrorExerciseGroup {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseErrorExerciseGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.errorCodes.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.exercises.push(Exercise.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ErrorExerciseGroup {
    return {
      errorCodes: globalThis.Array.isArray(object?.errorCodes)
        ? object.errorCodes.map((e: any) => globalThis.String(e))
        : [],
      exercises: globalThis.Array.isArray(object?.exercises)
        ? object.exercises.map((e: any) => Exercise.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ErrorExerciseGroup): unknown {
    const obj: any = {};
    if (message.errorCodes?.length) {
      obj.errorCodes = message.errorCodes;
    }
    if (message.exercises?.length) {
      obj.exercises = message.exercises.map((e) => Exercise.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ErrorExerciseGroup>, I>>(base?: I): ErrorExerciseGroup {
    return ErrorExerciseGroup.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ErrorExerciseGroup>, I>>(object: I): ErrorExerciseGroup {
    const message = createBaseErrorExerciseGroup();
    message.errorCodes = object.errorCodes?.map((e) => e) || [];
    message.exercises = object.exercises?.map((e) => Exercise.fromPartial(e)) || [];
    return message;
  },
};

function createBaseExercise(): Exercise {
  return { formattedProgram: "", variableNames: [], errors: [], humanErrors: [], programLength: 0 };
}

export const Exercise: MessageFns<Exercise> = {
  encode(message: Exercise, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.formattedProgram !== "") {
      writer.uint32(10).string(message.formattedProgram);
    }
    for (const v of message.variableNames) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.errors) {
      ErrorMessage.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.humanErrors) {
      writer.uint32(34).string(v!);
    }
    if (message.programLength !== 0) {
      writer.uint32(40).int32(message.programLength);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Exercise {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExercise();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.formattedProgram = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.variableNames.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.errors.push(ErrorMessage.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.humanErrors.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.programLength = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Exercise {
    return {
      formattedProgram: isSet(object.formattedProgram) ? globalThis.String(object.formattedProgram) : "",
      variableNames: globalThis.Array.isArray(object?.variableNames)
        ? object.variableNames.map((e: any) => globalThis.String(e))
        : [],
      errors: globalThis.Array.isArray(object?.errors) ? object.errors.map((e: any) => ErrorMessage.fromJSON(e)) : [],
      humanErrors: globalThis.Array.isArray(object?.humanErrors)
        ? object.humanErrors.map((e: any) => globalThis.String(e))
        : [],
      programLength: isSet(object.programLength) ? globalThis.Number(object.programLength) : 0,
    };
  },

  toJSON(message: Exercise): unknown {
    const obj: any = {};
    if (message.formattedProgram !== "") {
      obj.formattedProgram = message.formattedProgram;
    }
    if (message.variableNames?.length) {
      obj.variableNames = message.variableNames;
    }
    if (message.errors?.length) {
      obj.errors = message.errors.map((e) => ErrorMessage.toJSON(e));
    }
    if (message.humanErrors?.length) {
      obj.humanErrors = message.humanErrors;
    }
    if (message.programLength !== 0) {
      obj.programLength = Math.round(message.programLength);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Exercise>, I>>(base?: I): Exercise {
    return Exercise.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Exercise>, I>>(object: I): Exercise {
    const message = createBaseExercise();
    message.formattedProgram = object.formattedProgram ?? "";
    message.variableNames = object.variableNames?.map((e) => e) || [];
    message.errors = object.errors?.map((e) => ErrorMessage.fromPartial(e)) || [];
    message.humanErrors = object.humanErrors?.map((e) => e) || [];
    message.programLength = object.programLength ?? 0;
    return message;
  },
};

function createBaseErrorMessage(): ErrorMessage {
  return { message: "", implicatedVariableNames: [], code: undefined };
}

export const ErrorMessage: MessageFns<ErrorMessage> = {
  encode(message: ErrorMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    for (const v of message.implicatedVariableNames) {
      writer.uint32(18).string(v!);
    }
    if (message.code !== undefined) {
      ErrorMessageCode.encode(message.code, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ErrorMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseErrorMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.implicatedVariableNames.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.code = ErrorMessageCode.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ErrorMessage {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      implicatedVariableNames: globalThis.Array.isArray(object?.implicatedVariableNames)
        ? object.implicatedVariableNames.map((e: any) => globalThis.String(e))
        : [],
      code: isSet(object.code) ? ErrorMessageCode.fromJSON(object.code) : undefined,
    };
  },

  toJSON(message: ErrorMessage): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.implicatedVariableNames?.length) {
      obj.implicatedVariableNames = message.implicatedVariableNames;
    }
    if (message.code !== undefined) {
      obj.code = ErrorMessageCode.toJSON(message.code);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ErrorMessage>, I>>(base?: I): ErrorMessage {
    return ErrorMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ErrorMessage>, I>>(object: I): ErrorMessage {
    const message = createBaseErrorMessage();
    message.message = object.message ?? "";
    message.implicatedVariableNames = object.implicatedVariableNames?.map((e) => e) || [];
    message.code = (object.code !== undefined && object.code !== null)
      ? ErrorMessageCode.fromPartial(object.code)
      : undefined;
    return message;
  },
};

function createBaseErrorMessageCode(): ErrorMessageCode {
  return { code: "" };
}

export const ErrorMessageCode: MessageFns<ErrorMessageCode> = {
  encode(message: ErrorMessageCode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== "") {
      writer.uint32(10).string(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ErrorMessageCode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseErrorMessageCode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.code = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ErrorMessageCode {
    return { code: isSet(object.code) ? globalThis.String(object.code) : "" };
  },

  toJSON(message: ErrorMessageCode): unknown {
    const obj: any = {};
    if (message.code !== "") {
      obj.code = message.code;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ErrorMessageCode>, I>>(base?: I): ErrorMessageCode {
    return ErrorMessageCode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ErrorMessageCode>, I>>(object: I): ErrorMessageCode {
    const message = createBaseErrorMessageCode();
    message.code = object.code ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
